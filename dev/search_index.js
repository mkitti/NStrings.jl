var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = StaticStrings","category":"page"},{"location":"#StaticStrings","page":"Home","title":"StaticStrings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for StaticStrings.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Fixed-length strings wrapping a NTuple for Julia.","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"StaticStrings.jl implements several AbstractString subtypes that wrap a NTuple{N,UInt8}. An AbstractStaticString is a AbstractString with N codeunits.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The concrete subtypes of AbstractStaticString are as follows.","category":"page"},{"location":"","page":"Home","title":"Home","text":"StaticString{N} is a wrapper of a NTuple{N,UInt8} of exactly N codeunits, padded with \\0, nul, bytes.\nSubStaticString{N, R <: AbstractUnitRange} is a wrapper of a NTuple{N,UInt8} of up to N codeunits, with a unit range indicating a subset of codeunits.\nCStaticString{N} is similar to a StaticString but requires all the NUL bytes to be terminal codeunits. The struct also contains an extra terminal NUL.\nPaddedStaticString{N,PAD} is siimlar to StaticString but is padded with an arbitrary byte codeunit.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using StaticStrings\n\njulia> Static\"Hello world!\"\nStatic\"Hello world!\"12\n\njulia> Static\"Hello world!\" |> typeof\nStaticString{12}\n\njulia> CStatic\"Hello world!\"\nCStatic\"Hello world!\"12\n\njulia> ccall(:printf, Cint, (Ptr{Cchar},), cs)\nHello world!\n13\n\njulia> ccall(:printf, Cint, (Ptr{CStaticString{13}},), Ref(cs))\nHello world!\n13\n\njulia> Padded\"Hello \"20\nPadded\"Hello \"20\n\njulia> ps = Padded\"Hello \"20\nPadded\"Hello \"20\n\njulia> StaticString(ps)\nStatic\"Hello               \"20\n\njulia> push!(StaticString[\"Hello\"], \"Bye\")\n2-element Vector{StaticString}:\n Static\"Hello\"5\n Static\"Bye\"5","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"StaticStrings\nAbstractStaticString\nStaticString\n@Static_str\nSubStaticString\n@SubStatic\nCStaticString\n@CStatic_str\nPaddedStaticString\n@Padded_str\ndata\npad","category":"page"},{"location":"#StaticStrings.StaticStrings","page":"Home","title":"StaticStrings.StaticStrings","text":"StaticStrings.jl\n\nThe StaticStrings.jl package implements an AbstractString based on NTuple{N,UInt8}.\n\njulia> using StaticStrings\n\njulia> Static\"Thank you for using StaticStrings.jl\"\nStatic\"Thank you for using StaticStrings.jl\"36\n\njulia> Static\"Thank you for using StaticStrings.jl\"64\nStatic\"Thank you for using StaticStrings.jl\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\"64\n\njulia> StaticString((0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64))\nStatic\"Hello world\"11\n\nSee StaticString, SubStaticString, CStaticString, PaddedStaticString\n\n\n\n\n\n","category":"module"},{"location":"#StaticStrings.AbstractStaticString","page":"Home","title":"StaticStrings.AbstractStaticString","text":"AbstractStaticString{N}\n\nRepresents a string of N codeunits\n\n\n\n\n\n","category":"type"},{"location":"#StaticStrings.StaticString","page":"Home","title":"StaticStrings.StaticString","text":"StaticString(data::NTuple{N,UInt8})\nStatic\"string\"N\n\nAbstractStaticString that stores codeunits in a NTuple{N,UInt8}.\n\n\n\n\n\n","category":"type"},{"location":"#StaticStrings.@Static_str","page":"Home","title":"StaticStrings.@Static_str","text":"Static\"string\"[N]\n\nCreate a StaticString from \"string\". Optionally, specify the number of codeunits, N.\n\nExamples\n\njulia> Static\"großartig\"\nStatic\"großartig\"10\n\njulia> Static\"verehrungswürdig\"20\nStatic\"verehrungswürdig\\0\\0\\0\"20\n\n\n\n\n\n","category":"macro"},{"location":"#StaticStrings.SubStaticString","page":"Home","title":"StaticStrings.SubStaticString","text":"SubStaticString(data::NTuple{N, UInt8}, ind::Integer)\nSubStaticString(data::NTuple{N, UInt8}, ind::AbstractUnitRange)\nSubStatic\"string\"N\n\nAbstractStaticString that stores up to N codeunits in a NTuple{N,UInt8}. The actual codeunits used are a subset indicated by an AbstractUnitRange.\n\n\n\n\n\n","category":"type"},{"location":"#StaticStrings.CStaticString","page":"Home","title":"StaticStrings.CStaticString","text":"CStaticString(data::NTuple{N,UInt8})\nCStatic\"string\"N\n\nAbstractStaticString that stores codeunits in a NTuple{N,UInt8} but requires NUL codeunits to be at the end.\n\nN.B. The size of a CStaticString{N} is N+1 bytes.\n\n\n\n\n\n","category":"type"},{"location":"#StaticStrings.@CStatic_str","page":"Home","title":"StaticStrings.@CStatic_str","text":"CStatic\"string\"[N]\n\nCreate a CStaticString from \"string\". Optionally, specify the number of codeunits, N.\n\nExamples\n\njulia> CStatic\"Orada mısın\"\nCStatic\"Orada mısın\"13\n\njulia> CStatic\"Orada mısın\"25\nCStatic\"Orada mısın\"25\n\njulia> ccall(:jl_printf, Cint, (Ptr{Nothing}, Ptr{Cchar},), stdout isa IOContext ? stdout.io : stdout, CStatic\"Orada mısın\\n\"25)\nOrada mısın\n14\n\n\n\n\n\n","category":"macro"},{"location":"#StaticStrings.PaddedStaticString","page":"Home","title":"StaticStrings.PaddedStaticString","text":"PaddedStaticString{N,PAD}(data::NTuple{N,UInt8})\nPadded\"string[PAD]\"N\n\nAbstractStaticString that is padded with PAD.\n\n\n\n\n\n","category":"type"},{"location":"#StaticStrings.@Padded_str","page":"Home","title":"StaticStrings.@Padded_str","text":"Padded\"string[PAD]\"N\n\nCreate a PaddedStaticString of N codeunits from \"string\". The last codeunit in the provided string becomes the PAD.\n\nExamples\n\njulia> Padded\"私は元気です。 ありがとうございました。 \"64\nPadded\"私は元気です。 ありがとうございました。 \"64\n\njulia> Padded\"私は元気です。 ありがとうございました。 \"64 |> StaticString\nStatic\"私は元気です。 ありがとうございました。      \"64\n\n\n\n\n\n","category":"macro"},{"location":"#StaticStrings.data","page":"Home","title":"StaticStrings.data","text":"StaticStrings.data(string::AbstractStaticString{N})::NTuple{N,UInt8} where N\n\nRetrieve the internal Tuple containing the N stored UInt8 code units.\n\n\n\n\n\n","category":"function"},{"location":"#StaticStrings.pad","page":"Home","title":"StaticStrings.pad","text":"StaticStrings.pad(string::PaddedStaticString)\n\nRetrieve the UInt8 code unit used for padding.\n\n\n\n\n\nStaticStrings.pad(s::AbstractString, N::Integer, PAD::UInt8=0x0)::PaddedStaticString\n\nPad an AbstractString to N code units with the code unit PAD.\n\n\n\n\n\n","category":"function"}]
}
